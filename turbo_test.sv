module turbo_test();

reg[1055:0] in;
reg[1055:0] out;
reg[1055:0] expected_out;

integer counter;
reg start_rec;
reg start_send;

//inputs
reg clk, reset, vld_crc, rdy_out, cbs;
reg [7:0] data_in_rev;
reg [7:0] data_in;

//outputs
wire rdy_crc, vld_out, last_byte;
wire [7:0] data_out;

string correct;

initial 
begin

$display("starting simulation");
$display("counter | reset | vld_crc | where_in_block | data_in");

in <= 1056'b110001111110110110101000111110001100110000101100000001010001100001001000000111110111100111110010111100000111110010110001110010110100100110110010100110000001101111000110010100001110101100100101001100110100010110001110111100010000100011001001111010101100000010110010001001110101000001101010001011100000100000100010111001010100000011001101011111110001100110111001010101100100001110010111000010110100111001001000100010010110100010000011010100011101111101110100001001000110000010100111110111011100100011000000011000100000010001010100110101110101111001111011100100101110001000110100101010100001100100000100111001000011110001101100011010111101001000110010111111000111000100010111011011000111110011011100001000000110000110011000000011110111010001101101110000010100011110110010110010111100011000000010110011100101011101000010111111100010111110110011111100010001111010100101011110001001110000111110110101000100001111010010001100000011010001101101000110010111100101010101101100011011011111101110110011110011010101101101111111101110100000101101111000101001000110100011;
expected_out <= 1056'b
cbs <= 1'b0;
reset <= 1'b1;
vld_crc <= 1'b0;
rdy_out <= 1'b0;
clk <= 1'b0;
start_rec <= 1'b0;
start_send <= 1'b0;

counter <= 0;

data_in <= 8'd0;


end

always
begin
#10 clk <= ~clk;
end

//inital reset and setup
always
begin
//reset
@(posedge clk)
@(posedge clk)
@(posedge clk)
//end reset and assert vld_crc
@(negedge clk) begin
 reset <= 1'b0;
 vld_crc <= 1'b1;
end
//send code block size
@(negedge clk) begin
 vld_crc <= 1'b0;
 cbs <= 1'b0;
end
@(posedge clk) begin
 rdy_out <= 1'b1;
 counter <= 0;
 start_rec <= 1'b1;
end
//start sending data
@(posedge clk) begin
end
//wait until we get vld_out
@(posedge vld_out) begin
 start_rec <= 1'b0;
end
@(posedge clk) begin
	start_send <= 1'b1;
	counter <= 0;
end
@(posedge clk)
@(posedge clk)
@(posedge clk)
@(posedge clk)
@(negedge clk) begin
	rdy_out <= 1'b0;
end
@(negedge clk)
@(negedge clk) begin
	rdy_out <= 1'b1;
end
#3000
$stop;
end

always @(negedge clk)
begin
	// if recieving
	if(start_rec) begin
		data_in = in[counter +: 8];
//		#1
//		data_in[0] <= data_in_rev[7];
//		data_in[1] <= data_in_rev[6];
//		data_in[2] <= data_in_rev[5];
//		data_in[3] <= data_in_rev[4];
//		data_in[4] <= data_in_rev[3];
//		data_in[5] <= data_in_rev[2];
//		data_in[6] <= data_in_rev[1];
//		data_in[7] <= data_in_rev[0];
	end
	//if sending
	if(start_send) begin
		out[counter +: 8] = data_out;
		if(data_out == expected_out[counter +: 8])
		begin
			correct = "TRUE";
		end
		else 
		begin
			correct = "FALSE";
		end
	end
	
end

always @(posedge clk) begin
	$display("count: %0d | vld_crc: %b | start_rec: %b | start_send: %b | last_byte: %b | data_in: %b | data_out: %b | expected: %b | correct: %s", counter, vld_crc, start_rec, start_send, last_byte, data_in, out[counter +: 8], expected_out[counter +: 8], correct);
	if(start_rec) begin
		counter = counter + 8; 
	end
	if(start_send && rdy_out) begin
		counter = counter + 8;
	end
end

interleaver dut(clk, reset, vld_crc, rdy_out, cbs, data_in, rdy_crc, vld_out, last_byte, data_out);


endmodule
