module turbo_test();

reg[1055:0] in;
reg[1055:0] out;
reg[1055:0] expected_out;

integer counter;
reg[31:0] where_in_block;
reg[31:0] where_in_block7;
reg start_rec;
reg start_send;

//inputs
reg clk, reset, vld_crc, rdy_out, cbs;
reg[7:0] data_in;

//outputs
wire rdy_crc, vld_out;
wire[7:0] data_out;

string correct;

initial 
begin

	$display("starting simulation");
	$display("counter | reset | vld_crc | where_in_block | data_in");
	
	in <= 1056'b
	expected_out <= 1056'b
	cbs <= 1'b0;
	reset <= 1'b1;
	vld_crc <= 1'b0;
	rdy_out <= 1'b0;
	clk <= 1'b0;
	
	counter <= 0;
	where_in_block <= 0;
	
	data_in <= 8'd0;
	

end

always
begin
	#1 clk <= ~clk;
end

//inital reset and setup
always
begin
	//reset
	@(posedge clk)
	@(posedge clk)
	@(posedge clk)
	//end reset and assert vld_crc
	@(posedge clk) begin
		reset <= 1'b0;
		vld_crc <= 1'b1;
	end
	//send code block size, start sending data
	@(posedge clk) begin
		vld_crc <= 1'b0;
		cbs <= 1'b0;
		start_rec <= 1'b1;
		counter <= 0;
		rdy_out <= 1'b1;
	end
	//wait until we get vld_out
	@(posedge vld_out) begin
		start_rec <= 1'b0;
	end
	@(posedge clk) begin
		rdy_out <= 1'b0;
		start_send <= 1'b1;
		counter <= 0;
	end
	#300
	$stop;
end

always @(posedge clk)
begin
	if(start_rec) begin
		$display("count: %0d | where: %0d | data_in: %b", counter, where_in_block, data_in);
		where_in_block = counter*8;	
		data_in = in[where_in_block +: 8];
		counter = counter+1;	
	end
	if(start_send) begin
		$display("count: %0d | where: %0d | data_out: %b | expected: %b | correct: %s", counter, where_in_block, data_out, expected_out[where_in_block +: 8], correct);
		where_in_block = counter*8;
		out[where_in_block +: 8] = data_out;
		if(out[where_in_block +: 8] == expected_out[where_in_block +: 8])
		begin
			correct = "TRUE";
		end
		else 
		begin
			correct = "FALSE";
		end
		counter = counter + 1;
	end
end

interleaver dut(clk, reset, vld_crc, rdy_out, cbs, data_in, rdy_crc, vld_out, data_out);


endmodule


