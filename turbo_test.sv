module turbo_test();

reg[1055:0] in;
reg[1055:0] out;
reg[1055:0] expected_out;

integer counter, counter_rev;
reg start_rec;
reg start_send;

//inputs
reg clk, reset, vld_crc, rdy_out, cbs;
reg [7:0] data_in_rev;
reg [7:0] data_in;

//outputs
wire rdy_crc, vld_out, last_byte;
wire [7:0] data_out;

string correct;

initial 
begin

$display("starting simulation");
$display("counter | reset | vld_crc | where_in_block | data_in");

in <= 1056'b
expected_out <= 1056'b
reset <= 1'b1;
vld_crc <= 1'b0;
rdy_out <= 1'b0;
clk <= 1'b0;
start_rec <= 1'b0;
start_send <= 1'b0;
cbs <= 1'b0;

counter <= 0;

data_in <= 8'd0;
data_in_rev <= 8'd0;


end

always
begin
#10 clk <= ~clk;
end

//inital reset and setup
always
begin
//reset
@(posedge clk)
@(posedge clk)
@(posedge clk)
//end reset and assert vld_crc
@(negedge clk) begin
 reset <= 1'b0;
 vld_crc <= 1'b1;
end
@(posedge rdy_crc) begin
 rdy_out <= 1'b1;
 counter <= 0;
end

//wait until we get vld_out
@(posedge vld_out) begin
 vld_crc <= 1'b0;
end

@(posedge clk) begin
	counter <= 0;
end

#3000
$stop;
end

always @(negedge clk)
begin
	if(rdy_crc) begin
		counter_rev = (1056 - counter) - 8;
		counter = counter + 8;	
	end
	if(vld_out) begin
		counter_rev = (1056 - counter) - 8;
		counter = counter + 8;
	end
	// if recieving
	if(rdy_crc) begin
		data_in = in[counter_rev +: 8];
//		data_in[0] <= data_in_rev[7];
//		data_in[1] <= data_in_rev[6];
//		data_in[2] <= data_in_rev[5];
//		data_in[3] <= data_in_rev[4];
//		data_in[4] <= data_in_rev[3];
//		data_in[5] <= data_in_rev[2];
//		data_in[6] <= data_in_rev[1];
//		data_in[7] <= data_in_rev[0];
	end
	//if sending
	if(vld_out) begin
		out[counter_rev +: 8] = data_out;
		if(data_out == expected_out[counter_rev +: 8])
		begin
			correct = "TRUE";
		end
		else 
		begin
			correct = "FALSE";
		end
	end
	
	
end

always @(posedge clk) begin
	$display("count: %0d | vld_crc: %b | rdy_crc: %b | vld_out: %b | last_byte: %b | data_in: %b | data_out: %b | expected: %b | correct: %s", counter_rev, vld_crc, rdy_crc, vld_out, last_byte, data_in, data_out, expected_out[counter_rev +: 8], correct);
end

interleaver dut(clk, reset, vld_crc, rdy_out, cbs, data_in, rdy_crc, vld_out, last_byte, data_out);


endmodule
